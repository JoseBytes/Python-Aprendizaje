# Impresion de Variables

variable = "Pelota"

print(variable)
print(f"Hola esto es una {variable}")
print("Hola esto es una",variable)
print("Hola esto es una {}".format(variable)

# Tipos de Variables

int (tipo entero)
str (string / cadena)
float (numero flotante)
bool (Valores boleanos True o False)

------ Ejemplo -------

variable1 = "Hola Mundo" # Tipo entero, no hace falta declarar la variable tipo (str)
variable1 = str("Hola Mundo")
variable2 = int(5)
variable3 = float(5.3)
variable4 = True

print(type(variable2)) # Muestra el tipo de variable


# Operaciones Aritmeticas

Prioridad de los Operadores Aritmeticos:
1) Parentesis ()
2) Exponenciacion **
3) Multiplicacion, Division y Modulo *,/,%
4) Suma y Resta +,-


------ Ejemplo 1 -------

valor1 = 5
valor2 = 2

calculo = valor1 / valor2 # Division con decimales
calculo = valor1 // valor2 # Division entera redondeada
calculo = valor1 % valor2 # Operador Modulo (Obtiene el resto de una division)
calculo = valor1 ** valor2 # Elevador de exponenciacion 2 a quinta (5) = 2^5 

print(f'El resultado es {caculo}')

----- EJemplo de Exponenciacion -----

valor1 = 5
valor2 = 2
valor3 = 2

calculo = valor1**valor2 * valor3 # 5^2 * 2 = 50

print(f'EL resultado es {calculo}')

----- EJemplo 2 -----

calculo = 3**valor2 * (valor1/5 - (valor3*4)) # La formula es 3^2*(2/5 - (2*4))

print(f'EL resultado es {calculo}') 

# Operaciones Relacionales

* Se utilizan para establecer una relacion entre dos valores
* Compara estos valores entre si y genera un resultado verdadero o falso
* Tienen la misma prioridad en su evaluacion
* Los operadores relacionales tienen menor prioridad que los aritmeticos

Operadores:

> Mayor que
< Menor que
>= Mayor o igual que
<= Menor o igual que
!=  Diferente
== Igual

---- Ejemplo ----

valor1 = int(10)
valor2 = int(15)

calculo = valor1 > 15

print (f'El resultado es {calculo}') # Resultado: False

---- Ejemplo 2 ----

a = 10
b = 20
c = 30

calculo = a+b > c

print(f'El resultado es {calculo}') # Resultado: False

# Operaciones Logicas

* Permite construir expresiones logicas, se obtiene como resultado booleanos.

Operadores:

and Conjucion
or Disyuncion
not Negacion

* Operador AND (Multiplicacion Logica):

[Variable1] [Operador] [Variable2] [Resultado]
   True        and       True        True
   True        and       False       False
   False       and       True        False
   False       and       False       False

* Operador OR (Suma Logica):

[Variable1] [Operador] [Variable2] [Resultado]
   True        or        True        True
   True        or        False       True
   False       or        True        True
   False       or        False       False

* Operador NOT (Operacion de Negacion)
[Variable]  [Resultado]
 not(True)     False
 not(False)    True

Prioridad  (de los Operadores Logicos:
1) NOT
2) AND
3) OR

---- Ejemplo ----

a = 10
b = 12
c = 13
d = 10

calculo = ((a>b) or (a<c)) and ((a==c) or (a>=b))

print(f'El resultado es {calculo}') # Reslultado: False


---- Ejemplo 2 ----
a = 10
b = 20
c = 30

calculo = ((a<b) or (c<a))

print (f'El resultado es {calculo}') # El resultado es True

# Operadores de Aginaciones

* Se le asigna nuevos valores a una misma variable<F4><F4>

a = 0

a += 5 # Suma en Aginacion (a pasa a tener  un valor de 5)
a -= 2 # Resta en Asignacion (a pasa a tener un valor de 3)
a *= 3 # Multiplicacion en Asignacion (a vale ahora 9)
a /= 3 # Division en Asignacion (a ahora tiene un valor de 3)
a **= 2 # Potencia en Asignacion (a tiene un valor de 9)
a %= 2 # Modulo por asignacion

print(a)

# Intercambio de Valores

a = 1
b = 2

a , b = b , a # El valor ahora es a=2 y b=1

# Funciones Integrada

var = bin(10) # Convierte un valor a binario
var = hex(10) # Convierte un valor a Hexadecimal
var = len(10) # Cuenta la longitud de caracteres
var = round(5.6) # Redondea un valor
var = round(5.6554, 2) # Redondea a 2 decimales 5.65
var = abs(-8) # Obtiene el valor absoluto de un numero
.lower()      # Colocar minusculas
.upper()      # Colocar mayusculas
.strip()      # Omitir caracteres

valor = 55.2222
print(f"El valor es {valor:.2f}") #Muestra 2 decimales, el valor es de 55.22

# Condicionales

Dependiendo de la condicion si el valor es True o False se genera una instruccion.

if a>b or c==b:
   print("Hola")
elif b!=c:
   print("hola")
   if simulando multicondicinal:
      la simulo
   else:
      no se simula
else:
   adios

# Colecciones: Listas []

Pueden almacenar valores de tipo Cadena, Enteros, Flotantes, Sublistas, Booleanos.
La numeracion o posicion de las listas o colecciones comienzan desde el 0 hasta el -1

------ Ejemplo 1 ------

lista = ["Lunes", "Martes", "Miercoles", "Jueves", "Viernes"]

print(lista[1]) #Imprime Lunes
print(lista[-1]) #Imprime Viernes
print(lista[0:3]) #Imprime desde el indice 0 a 3 Lunes, Martes, Miercoles
print(lista[2:]) #Imprime desde el indice inicial hasta el final de la lista

------ Ejemplo 2 ------

Lista con diferentes valores y sublistas

lista = [40, 50, True, False, 5.4, ["Hola Mundo", 1, 2, 3], Cadena]

print(len(lista)) # Muestra en un numero entero la cantidad de elementos (7)
print(len(lista[5])) # Muestra la cantidad de Item en la Sublistas

------ Agregar/Modificar ------
Las Listas pueden ser modificadas agregando nuevos elementos, modificando los elementos o extender la lista.

lista = [1,2,3,4,5]
lista.append(6)    # La funcion append.() agrega elementos al final de la lista
lista.insert(0,7)  # Inserta elementos en una posicion especifica (index,item)
lista.extend([7,8,9]) # Concatena varios elementos en una lista

lista2 = [10, 11, 12, 13]
lista3 = lista + lista2 # Suma dos listas de forma aritmetica o se pueden multiplicar
lista[3] = 6            # Modifica el elemento de una lista

------ Busqueda ------
Busquedas de Elementos en una lista:

lista = [1, 2, 3, 4, 5]

print(80 not in lista) # Busca si no esta el valor de 80 en la lista
print(5 in lista)     # Busca si 5 esta en la lista (True)
print(lista.index(2)) # Muestra la posicion del Elemento
print(lista.count(4)) # Muestra cuantas veces se repite un elemento

------ Eliminar ------
Eliminar elementos o vaciar lista:

lista = [1, 2, 3, 4, 5, "Jose", "Viviana"]
lista.pop()    # Elimina el ultimo elemento por defecto
lista.pop(4)   # Elimina el elemento de una posicion especificada
lista.remove("Jose") # Elimina un elemento en especifico
lista.clear()  # Elimina todos los elementos de una lista

------ Ordenar ------

lista.reverse() # Invierte el orden de una lista
lista.sort()    # Ordena los ementos de forma ascendente
lista.sort(reverse=True) # Ordena los elementos de mayor a menor

# Colecciones: Tuples ()

Las Tuplas son Listas inmutables (no modificables)
Las Tuplas se pueden transformar en Listas y viceversa

tupla = (1, 2, 3, 4, 5)
lista = list(tupla)     # La tupla pasaria a ser una lista

# Colecciones: Conjuntos {}

Los conjuntos son un grupo elementos quese agregan de forma desordenada.
No pueden haber elementos duplicados.
No pueden haber colecciones dentro de un conjunto

conjunto = set() # La funcion set() indica que se creara un conjunto vacio

conjunto = {1, 2, 3, 4, 5}

------ Agregar/Modificar ------
conjunto.add(6) #Se utiliza para agregar un elemento en la coleccion
conjunto.discard(4) # Elimina un elemento del conjunto en especifico
conjunto.clear()    # Vacia el conjunto
conjunto.pop()      # Elimina de izquierda a derecha

------ Operaciones: Union/Interseccion/Diferencial ------
a = {1, 2, 3}
b = {3, 4, 5}

c = a | b   # Union: Une solo los elementos que hay en ambos conjuntos
c = a & b   # Interseccion: Agrega los elementos que se repite en A y B
c = a - b   # Diferencia: Agrega los elementos que estan en A y no en B
c = a ^ b   # Diferencia Simetrica: Agrega los elementos que no estan en A y B

------ Subconjuntos/Superconjuntos
a = {1, 2, 3}
b = {3, 4, 5}
c = {1, 2, 3, 4, 5}

print(a.inssubset(c)) # Determina si A es un subconjunto de C
print(c.issuperset(a)) # Determina si C es un superconjunto de A
print(a.isdisjoint(b)) # Determina si A no comparte elementos en comun con B

------ Inmutable
Convierte un conjunto en una coleccion no modificable

conjunto = frozenset({1, 2, 3, 4, 5})

# Colecciones: Diccionarios {}

La principal caracteristica de un Diccionario es que tienen CLAVE:VALOR
No pueden haber duplicados al igual que en los Conjuntos.
Los diccionarios vacios se pueden colocar directos sin set().

diccionario = {"azul":"blue", "rojo":"red", "verde":"green"}

print(diccionario["azul"]) # Imprime el valor del elemento "Blue"

------ Agregar/Modificar
diccionario["amarillo"] = "yelow" # Agrega un nuevo elemento con valor
diccionario["azul"] = "BLUE" # Modifica el valor del blue a BLUE

del(lista["rojo"]) # Elimina un conjunto de elementos del diccionario desde la clave

------ Formas de Estructura

diccionario = {"Jose":[28, 1.82], "Liza":{"Edad":22, "Estatura":1.79}}
print(diccionario["Jose"])

------ Otro tipo de estructura
diccionario2 = {"Jose":[22, 1.80], "Liza":{"Edad":22, "Estatura":1.79}}
print(diccionario2)
print(diccionario2["Liza"])

------ Ejemplo 3
equipo = {10:"Jose", 8:"Viviana", 3:"Lizangel"}
print(equipo)
print(equipo[10])
print(equipo.get(11, "No existe el jugador")) # Busca el valor de una clave, si no existe da un mensaje
print(equipo.keys()) # Obtiene las claves del diccionario
print(equipo.values()) # Obtiene el valor de las claves
print(equipo.items()) # Obtiene el contenido del diccionario dentro de Tuplas

equipo.clear()  # Vacia el diccionario
print(equipo)

# PILAS
Pila o Stack es una estructura de datos donde el ultimo en entrar es el primero en salir
Last Input / First Output
Se hacen mediante listas

pila = ["Jose", "Viviana", "Liza", "Maria"]

pila.append("Brenda")
pila.pop()

print(pila)

# COLAS
El primero en llegar es el primero en salir
First Input / First Output

cola = ["Viviana", "Jose", "Lizangel"]

cola.append("Brenda")   # Ultimo en llegar
atendido = cola.pop(0)  # Primero en salir el index 0 (Viviana)

print(cola)

# BUCLES: While
